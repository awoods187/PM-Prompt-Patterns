name: CI

# Trigger on pushes to main, all PRs, and manual dispatch
on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**/*.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**/*.md'
      - 'LICENSE'
  workflow_dispatch:

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal permissions for security
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Job 1: Lint and Format Check
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff isort mypy

      - name: Check formatting with Black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

      - name: Lint with Ruff
        run: |
          ruff check .

      - name: Type check with mypy
        run: |
          mypy pm_prompt_toolkit/ ai_models/
        continue-on-error: true  # Don't fail build on type errors for now

  # Job 2: Test (Matrix across Python versions)
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run tests with coverage
        run: |
          pytest --cov=pm_prompt_toolkit --cov=ai_models --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Upload coverage artifact
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-py${{ matrix.python-version }}
          fail_ci_if_error: false

  # Job 3: Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-

      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Install security tools
        run: |
          pip install bandit safety pip-audit semgrep

      - name: Run Bandit (Python security linter)
        run: |
          bandit -r pm_prompt_toolkit/ ai_models/ -f json -o bandit-report.json || true
          bandit -r pm_prompt_toolkit/ ai_models/ || true
        continue-on-error: true

      - name: Run Safety (dependency vulnerability check)
        run: |
          safety check --json || true
          safety check || true
        continue-on-error: true

      - name: Run pip-audit (supply chain security)
        run: |
          pip-audit --desc || true
        continue-on-error: true

      - name: Run Semgrep (SAST)
        run: |
          semgrep --config=auto --json --output=semgrep-report.json pm_prompt_toolkit/ ai_models/ || true
          semgrep --config=auto pm_prompt_toolkit/ ai_models/ || true
        continue-on-error: true

      - name: TruffleHog Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event_name == 'push' && github.event.before || '' }}
          head: HEAD
          extra_args: --only-verified

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            semgrep-report.json
          if-no-files-found: ignore

  # Job 4: Build Verification
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-build-
            ${{ runner.os }}-pip-

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package with twine
        run: |
          twine check dist/*

      - name: Test installation in clean environment
        run: |
          python -m venv test_env
          source test_env/bin/activate
          pip install dist/*.whl
          python -c "import pm_prompt_toolkit; print(f'Successfully imported version {pm_prompt_toolkit.__version__}')"
          deactivate

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  # Job 5: API endpoint tests (conditional, requires secrets)
  test-endpoints:
    runs-on: ubuntu-latest
    # Only run on main branch or manual trigger (requires API keys)
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Test API endpoints
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          # Only run if keys are available
          if [ -n "$ANTHROPIC_API_KEY" ]; then
            echo "Testing Anthropic endpoints..."
            pytest tests/test_model_endpoints.py -v -k "anthropic" || true
          fi
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "Testing OpenAI endpoints..."
            pytest tests/test_model_endpoints.py -v -k "openai" || true
          fi
          if [ -n "$GOOGLE_API_KEY" ]; then
            echo "Testing Google endpoints..."
            pytest tests/test_model_endpoints.py -v -k "google" || true
          fi
